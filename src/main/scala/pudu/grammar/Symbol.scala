package pudu.grammar

/** Classes to specify grammar symbols. */

sealed trait Symbol:
  def name: String

/* Type T refers to the object to be generated by the parser, e.g., an AST node */
class NonTerminal[T](tag: Option[String]) extends Symbol:
  val name = tag.getOrElse(super.toString)
  override def toString = name

/* It is important to note that values associated with some terminals, such as
 * literals and identifiers, are part of the Token objects generated by the lexer,
 * and not included in the Terminal class */
class Terminal[+Token <: reflect.Enum](val ordinal: Int, val name: String) extends Symbol:
  override def toString = name

object NonTerminal:
  def apply[T] = new NonTerminal[T](None)
  def apply[T](tag: String) = new NonTerminal[T](Some(tag))

object Terminal:
  inline def apply[T <: reflect.Enum] =
    val (ordinal, name) = enumMetadata[T]
    new Terminal[T](ordinal, name)
  inline def apply[T <: reflect.Enum](name: String) =
    val (ordinal, _) = enumMetadata[T]
    new Terminal[T](ordinal, name)

