package pudu.grammar


/** Classes to specify grammar symbols. */

sealed trait Symbol

/** Type T refers to the object to be generated by the parser, e.g. an AST node */
class NonTerminal[T](tag: String) extends Symbol:
  override def toString =
    if tag.isEmpty then super.toString
    else tag

/** It is important to note that values associated with some terminals, like
 *  literals and identifiers, are part of the Token objects generated by the lexer,
 *  and not included in the Terminal class */
class Terminal[+Token <: reflect.Enum](val ordinal: Int, val name: String) extends Symbol:
  override def toString = name

object NonTerminal:
  def apply[T] = new NonTerminal[T]("")
  def apply[T](tag: String) = new NonTerminal[T](tag)

object Terminal:
  inline def apply[T <: reflect.Enum] =
    val (ordinal, name) = enumMetadata[T]
    new Terminal[T](ordinal, name)
  inline def apply[T <: reflect.Enum](name: String) =
    val (ordinal, _) = enumMetadata[T]
    new Terminal[T](ordinal, name)

/* The type of the data associated with a symbol or tuple of symbols.
 * We don't use {{{ case Tuple => Tuple.Map[T, SymData] }}} to avoid
 * matching nested tuples */
type SymData[T] = T match
  case Terminal[t] => t
  case NonTerminal[t] => t
  case Tuple => Tuple.Map[T, [x] =>> x match
                                        case NonTerminal[u] => u
                                        case Terminal[u] => u]

/* Checks if T is a NonTerminal[t <: Tree], a Terminal[t <: Token], or a tuple
 * where each element matches one of those types. */
type IsBounded[Tree, Token, T] = T match
  case NonTerminal[t] => t <:< Tree
  case Terminal[t] => t <:< Token
  case Tuple => SymData[T] <:< Tuple.Map[T, [x] =>> x match
                                           case NonTerminal[_] => Tree
                                           case Terminal[_] => Token ]
