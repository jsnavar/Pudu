package pudu.grammar


/** Classes to specify grammar symbols. */

sealed trait Symbol

/** Type T refers to the object to be generated by the parser, e.g. an AST node */
class NonTerminal[+T](tag: String) extends Symbol:
  override def toString =
    if tag.isEmpty then super.toString
    else tag

/** It is important to note that values associated with some terminals, like
 *  literals and identifiers, are part of the Token objects generated by the lexer,
 *  and not included in the Terminal class */
class Terminal[+Token <: reflect.Enum](val ordinal: Int, val name: String) extends Symbol:
  override def toString = name

object NonTerminal:
  def apply[T] = new NonTerminal[T]("")
  def apply[T](tag: String) = new NonTerminal[T](tag)

object Terminal:
  inline def apply[T <: reflect.Enum] =
    val (ordinal, name) = enumMetadata[T]
    new Terminal[T](ordinal, name)
  inline def apply[T <: reflect.Enum](name: String) =
    val (ordinal, _) = enumMetadata[T]
    new Terminal[T](ordinal, name)

/* The type of the data associated with a symbol. */
type SymData[T] = T match
  case Terminal[t] => t
  case NonTerminal[t] => t

/* Given a tuple type Tup, SymTuple[Tup] is another
 * tuple type of the same size, with Symbol in every position.
 * This is used to bound tuples using Tup <:< SymTuple[Tup] */
type SymTuple[Tup <: Tuple] = Tup match
  case EmptyTuple => EmptyTuple
  case x *: xs => Symbol *: SymTuple[xs]
